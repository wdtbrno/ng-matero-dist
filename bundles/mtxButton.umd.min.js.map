{"version":3,"sources":["../../../projects/extensions/button/button-loading.directive.ts","../../../projects/extensions/button/button.module.ts"],"names":["MatButtonLoadingDirective","matButton","componentFactoryResolver","viewContainerRef","renderer","this","spinnerFactory","resolveComponentFactory","MatProgressSpinner","prototype","ngOnChanges","changes","loading","currentValue","_elementRef","nativeElement","classList","add","disabled","createSpinner","firstChange","remove","destroySpinner","spinner","createComponent","instance","color","diameter","mode","appendChild","destroy","Directive","args","selector","MatButton","ComponentFactoryResolver","ViewContainerRef","Renderer2","Input","NgModule","imports","CommonModule","MatButtonModule","MatProgressSpinnerModule","exports","declarations"],"mappings":"2sBAqCE,SAAAA,EACUC,EACAC,EACAC,EACAC,GAHAC,KAAAJ,UAAAA,EACAI,KAAAH,yBAAAA,EACAG,KAAAF,iBAAAA,EACAE,KAAAD,SAAAA,EAERC,KAAKC,eAAiBD,KAAKH,yBAAyBK,wBAAwBC,EAAAA,2BAG9ER,EAAAS,UAAAC,YAAA,SAAYC,GACLA,EAAQC,UAITD,EAAQC,QAAQC,cAClBR,KAAKJ,UAAUa,YAAYC,cAAcC,UAAUC,IAAI,sBACvDZ,KAAKJ,UAAUiB,UAAW,EAC1Bb,KAAKc,iBACKR,EAAQC,QAAQQ,cAC1Bf,KAAKJ,UAAUa,YAAYC,cAAcC,UAAUK,OAAO,sBAC1DhB,KAAKJ,UAAUiB,SAAWb,KAAKa,SAC/Bb,KAAKiB,oBAIDtB,EAAAS,UAAAU,cAAA,WACDd,KAAKkB,UACRlB,KAAKkB,QAAUlB,KAAKF,iBAAiBqB,gBAAgBnB,KAAKC,gBAC1DD,KAAKkB,QAAQE,SAASC,MAAQrB,KAAKqB,MACnCrB,KAAKkB,QAAQE,SAASE,SAAW,GACjCtB,KAAKkB,QAAQE,SAASG,KAAO,gBAC7BvB,KAAKD,SAASyB,YACZxB,KAAKJ,UAAUa,YAAYC,cAC3BV,KAAKkB,QAAQE,SAASX,YAAYC,iBAKhCf,EAAAS,UAAAa,eAAA,WACFjB,KAAKkB,UACPlB,KAAKkB,QAAQO,UACbzB,KAAKkB,QAAU,gCA/DpBQ,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,qWAJHC,EAAAA,iBAVPC,EAAAA,gCAOAC,EAAAA,wBAFAC,EAAAA,8CAqBCC,EAAAA,wBAGAA,EAAAA,qBAGAA,EAAAA,eCtBH,iCALCC,EAAAA,SAAQP,KAAA,CAAC,CACRQ,QAAS,CAACC,EAAAA,aAAcC,EAAAA,gBAAiBC,EAAAA,0BACzCC,QAAS,CAAC5C,GACV6C,aAAc,CAAC7C","sourcesContent":["import {\r\n  ComponentFactory,\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  Directive,\r\n  Input,\r\n  OnChanges,\r\n  Renderer2,\r\n  SimpleChanges,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { MatButton } from '@angular/material/button';\r\nimport { MatProgressSpinner } from '@angular/material/progress-spinner';\r\n\r\n@Directive({\r\n  selector: `button[mat-button][loading],\r\n             button[mat-raised-button][loading],\r\n             button[mat-stroked-button][loading],\r\n             button[mat-flat-button][loading],\r\n             button[mat-icon-button][loading],\r\n             button[mat-fab][loading],\r\n             button[mat-mini-fab][loading]`,\r\n})\r\nexport class MatButtonLoadingDirective implements OnChanges {\r\n  private spinnerFactory: ComponentFactory<MatProgressSpinner>;\r\n  private spinner: ComponentRef<MatProgressSpinner> | null;\r\n\r\n  @Input()\r\n  loading: boolean;\r\n\r\n  @Input()\r\n  disabled: boolean;\r\n\r\n  @Input()\r\n  color: ThemePalette;\r\n\r\n  constructor(\r\n    private matButton: MatButton,\r\n    private componentFactoryResolver: ComponentFactoryResolver,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private renderer: Renderer2\r\n  ) {\r\n    this.spinnerFactory = this.componentFactoryResolver.resolveComponentFactory(MatProgressSpinner);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (!changes.loading) {\r\n      return;\r\n    }\r\n\r\n    if (changes.loading.currentValue) {\r\n      this.matButton._elementRef.nativeElement.classList.add('mat-button-loading');\r\n      this.matButton.disabled = true;\r\n      this.createSpinner();\r\n    } else if (!changes.loading.firstChange) {\r\n      this.matButton._elementRef.nativeElement.classList.remove('mat-button-loading');\r\n      this.matButton.disabled = this.disabled;\r\n      this.destroySpinner();\r\n    }\r\n  }\r\n\r\n  private createSpinner(): void {\r\n    if (!this.spinner) {\r\n      this.spinner = this.viewContainerRef.createComponent(this.spinnerFactory);\r\n      this.spinner.instance.color = this.color;\r\n      this.spinner.instance.diameter = 20;\r\n      this.spinner.instance.mode = 'indeterminate';\r\n      this.renderer.appendChild(\r\n        this.matButton._elementRef.nativeElement,\r\n        this.spinner.instance._elementRef.nativeElement\r\n      );\r\n    }\r\n  }\r\n\r\n  private destroySpinner(): void {\r\n    if (this.spinner) {\r\n      this.spinner.destroy();\r\n      this.spinner = null;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatButtonLoadingDirective } from './button-loading.directive';\n\n@NgModule({\n  imports: [CommonModule, MatButtonModule, MatProgressSpinnerModule],\n  exports: [MatButtonLoadingDirective],\n  declarations: [MatButtonLoadingDirective],\n})\nexport class MtxButtonModule {}\n"]}