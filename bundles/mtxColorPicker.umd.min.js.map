{"version":3,"sources":["../../../projects/extensions/color-picker/color-picker.component.ts","../../../projects/extensions/color-picker/color-picker.module.ts"],"names":["nextUniqueId","MtxColorPickerComponent","_focusMonitor","_elementRef","_changeDetectorRef","_zone","ngControl","_formField","_document","_this","this","_value","stateChanges","Subject","_uid","_focused","_required","_disabled","_readonly","errorState","controlType","_onChange","_onTouched","colorChange","EventEmitter","_panelOpen","_canOpenOnNextFocus","_windowBlurHandler","activeElement","nativeElement","monitor","subscribe","origin","next","valueAccessor","Object","defineProperty","prototype","newValue","_id","value","_placeholder","focused","empty","coerceBooleanProperty","ngDoCheck","invalid","touched","ngAfterViewInit","window","runOutsideAngular","addEventListener","_supportsShadowDom","element","rootNode","getRootNode","_isInsideShadowRoot","ShadowRoot","ngOnDestroy","complete","stopMonitoring","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_handleFocus","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","trigger","openMenu","_closingActionsSubscription","merge","_getOutsideClickStream","pipe","event","closeMenu","unsubscribe","_openPanel","_closePanel","_onColorChanged","model","color","hex","emit","fromEvent","filter","clickTarget","composedPath","target","formField","contains","Component","args","selector","exportAs","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","providers","provide","MatFormFieldControl","useExisting","FocusMonitor","ElementRef","ChangeDetectorRef","NgZone","NgControl","decorators","type","Optional","Self","MatFormField","Host","Inject","DOCUMENT","Input","Output","ViewChild","MatMenuTrigger","static","NgModule","imports","CommonModule","FormsModule","MatMenuModule","MatFormFieldModule","MatInputModule","ColorChromeModule","exports","declarations"],"mappings":"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","sourcesContent":["import {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnDestroy,\n  Optional,\n  Self,\n  ElementRef,\n  Input,\n  Output,\n  EventEmitter,\n  Inject,\n  DoCheck,\n  ViewChild,\n  Host,\n  AfterViewInit,\n  NgZone,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { _supportsShadowDom } from '@angular/cdk/platform';\nimport { MatFormFieldControl, MatFormField } from '@angular/material/form-field';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { Subject, Observable, merge, fromEvent, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { ColorEvent } from 'ngx-color';\n\nlet nextUniqueId = 0;\n\n@Component({\n  selector: 'mtx-color-picker',\n  exportAs: 'mtxColorPicker',\n  templateUrl: './color-picker.component.html',\n  styleUrls: ['./color-picker.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{ provide: MatFormFieldControl, useExisting: MtxColorPickerComponent }],\n})\nexport class MtxColorPickerComponent\n  implements OnDestroy, DoCheck, AfterViewInit, ControlValueAccessor, MatFormFieldControl<any> {\n  /** Value of the color picker control. */\n  @Input()\n  get value(): string | null {\n    return this._value;\n  }\n  set value(newValue: string | null) {\n    this._value = newValue;\n    this._onChange(newValue);\n    this.stateChanges.next();\n  }\n  private _value: string | null = '';\n\n  /** Implemented as part of MatFormFieldControl. */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /** Unique id for this input. */\n  private _uid = `mtx-color-picker-${nextUniqueId++}`;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Placeholder to be shown if value is empty. */\n  @Input()\n  get placeholder(): string {\n    return this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  private _placeholder: string;\n\n  /** Whether the input is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  private _focused = false;\n\n  get empty(): boolean {\n    return !this.value;\n  }\n\n  get shouldLabelFloat(): boolean {\n    return this.focused || !this.empty;\n  }\n\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  private _required = false;\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  private _disabled = false;\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean {\n    return this._readonly;\n  }\n  set readonly(value: boolean) {\n    this._readonly = coerceBooleanProperty(value);\n  }\n  private _readonly = false;\n\n  errorState = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mtx-color-picker';\n\n  /** The aria-describedby attribute on the color picker for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when color picker has been touched` */\n  _onTouched = () => {};\n\n  /** Event emitted when the color changed */\n  @Output() readonly colorChange = new EventEmitter<ColorEvent>();\n\n  @ViewChild(MatMenuTrigger, { static: true }) trigger: MatMenuTrigger;\n\n  /** Whether or not the overlay panel is open. */\n  _panelOpen = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Whether the element is inside of a ShadowRoot component. */\n  private _isInsideShadowRoot: boolean;\n\n  /**\n   * Whether the color picker can open the next time it is focused. Used to prevent a focused,\n   * closed color picker from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the color picker is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n      this._document.activeElement !== this._elementRef.nativeElement || this._panelOpen;\n  };\n\n  constructor(\n    private _focusMonitor: FocusMonitor,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _zone: NgZone,\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() @Host() private _formField: MatFormField,\n    @Optional() @Inject(DOCUMENT) private _document: any\n  ) {\n    _focusMonitor.monitor(_elementRef, true).subscribe(origin => {\n      if (this._focused && !origin) {\n        this._onTouched();\n      }\n      this._focused = !!origin;\n      this.stateChanges.next();\n    });\n\n    if (this.ngControl != null) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngDoCheck(): void {\n    if (this.ngControl) {\n      this.errorState = (this.ngControl.invalid && this.ngControl.touched) as boolean;\n      this.stateChanges.next();\n    }\n  }\n\n  ngAfterViewInit() {\n    if (typeof window !== 'undefined') {\n      this._zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n\n      if (_supportsShadowDom()) {\n        const element = this._elementRef.nativeElement;\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n        // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n        // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n        this._isInsideShadowRoot = rootNode instanceof (window as any).ShadowRoot;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Implemented as part of MatFormFieldControl. */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /** Implemented as part of MatFormFieldControl. */\n  onContainerClick() {\n    this._handleFocus();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: string | null): void {\n    this.value = value || '';\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  /** Open panel with input focus event. */\n  _handleFocus() {\n    this.trigger.openMenu();\n\n    this._closingActionsSubscription = merge(this._getOutsideClickStream())\n      .pipe()\n      .subscribe(event => {\n        this.trigger.closeMenu();\n        this._closingActionsSubscription.unsubscribe();\n      });\n  }\n\n  /** Opens the overlay panel. */\n  _openPanel() {\n    if (this._focused) {\n      this._panelOpen = true;\n    }\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  _closePanel() {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /** The callback of color changed. */\n  _onColorChanged(model: ColorEvent) {\n    this.value = model.color.hex;\n    this.colorChange.emit(model);\n  }\n\n  /** Stream of clicks outside of the color picker panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    return merge(\n      fromEvent(this._document, 'click') as Observable<MouseEvent>,\n      fromEvent(this._document, 'touchend') as Observable<TouchEvent>\n    ).pipe(\n      filter(event => {\n        // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n        // fall back to check the first element in the path of the click event.\n        const clickTarget = (\n          this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] : event.target\n        ) as HTMLElement;\n        const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n\n        return (\n          clickTarget !== this._elementRef.nativeElement &&\n          (!formField || !formField.contains(clickTarget))\n        );\n      })\n    );\n  }\n\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_readonly: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { ColorChromeModule } from 'ngx-color/chrome';\n\nimport { MtxColorPickerComponent } from './color-picker.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatMenuModule,\n    MatFormFieldModule,\n    MatInputModule,\n    ColorChromeModule,\n  ],\n  exports: [MtxColorPickerComponent],\n  declarations: [MtxColorPickerComponent],\n})\nexport class MtxColorPickerModule {}\n"]}