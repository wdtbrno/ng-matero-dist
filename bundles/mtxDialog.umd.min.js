!function(n,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/common"),require("@angular/material/dialog"),require("@angular/material/button"),require("@angular/material/icon"),require("@ng-matero/extensions/utils")):"function"==typeof define&&define.amd?define("@ng-matero/extensions/dialog",["exports","@angular/core","@angular/common","@angular/material/dialog","@angular/material/button","@angular/material/icon","@ng-matero/extensions/utils"],t):t(((n="undefined"!=typeof globalThis?globalThis:n||self)["ng-matero"]=n["ng-matero"]||{},n["ng-matero"].extensions=n["ng-matero"].extensions||{},n["ng-matero"].extensions.dialog={}),n.ng.core,n.ng.common,n.ng.material.dialog,n.ng.material.button,n.ng.material.icon,n["ng-matero"].extensions.utils)}(this,(function(n,t,o,e,i,a,l){"use strict";var c=function(){function n(n,t){this.dialogRef=n,this.data=t}return n.prototype._onClick=function(n){n&&n.call(this),this._onClose()},n.prototype._onClose=function(){this.dialogRef.close()},n}();c.decorators=[{type:t.Component,args:[{selector:"mtx-dialog",exportAs:"mtxDialog",template:'<h1 class="mtx-dialog-title" *ngIf="data.title">{{data.title | toObservable | async}}\n  <button mat-icon-button *ngIf="data.showCloseIcon" (click)="_onClose()">\n    <mat-icon>close</mat-icon>\n  </button>\n</h1>\n<div class="mtx-dialog-content" *ngIf="data.description">\n  <p>{{data.description | toObservable | async}}</p>\n</div>\n<div class="mtx-dialog-actions">\n  <ng-container *ngFor="let btn of data.buttons">\n    <ng-container [ngSwitch]="btn.type">\n      <ng-container *ngSwitchCase="\'raised\'">\n        <button mat-raised-button *ngIf="btn.focusInitial" cdkFocusInitial\n                [color]="btn.color" [ngClass]="btn.class" (click)="_onClick(btn.onClick)">\n          {{btn.text | toObservable | async}}\n        </button>\n        <button mat-raised-button *ngIf="!btn.focusInitial"\n                [color]="btn.color" [ngClass]="btn.class" (click)="_onClick(btn.onClick)">\n          {{btn.text | toObservable | async}}\n        </button>\n      </ng-container>\n      <ng-container *ngSwitchCase="\'stroked\'">\n        <button mat-stroked-button *ngIf="btn.focusInitial" cdkFocusInitial\n                [color]="btn.color" [ngClass]="btn.class" (click)="_onClick(btn.onClick)">\n          {{btn.text | toObservable | async}}\n        </button>\n        <button mat-stroked-button *ngIf="!btn.focusInitial"\n                [color]="btn.color" [ngClass]="btn.class" (click)="_onClick(btn.onClick)">\n          {{btn.text | toObservable | async}}\n        </button>\n      </ng-container>\n      <ng-container *ngSwitchCase="\'flat\'">\n        <button mat-flat-button *ngIf="btn.focusInitial" cdkFocusInitial\n                [color]="btn.color" [ngClass]="btn.class" (click)="_onClick(btn.onClick)">\n          {{btn.text | toObservable | async}}\n        </button>\n        <button mat-flat-button *ngIf="!btn.focusInitial"\n                [color]="btn.color" [ngClass]="btn.class" (click)="_onClick(btn.onClick)">\n          {{btn.text | toObservable | async}}\n        </button>\n      </ng-container>\n      <ng-container *ngSwitchDefault>\n        <button mat-button *ngIf="btn.focusInitial" cdkFocusInitial\n                [color]="btn.color" [ngClass]="btn.class" (click)="_onClick(btn.onClick)">\n          {{btn.text | toObservable | async}}\n        </button>\n        <button mat-button *ngIf="!btn.focusInitial"\n                [color]="btn.color" [ngClass]="btn.class" (click)="_onClick(btn.onClick)">\n          {{btn.text | toObservable | async}}\n        </button>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</div>\n',encapsulation:t.ViewEncapsulation.None,changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[".mtx-dialog-title{display:flex;justify-content:space-between;align-items:center;margin:0 0 20px;font:500 20px/32px Roboto,Helvetica Neue,sans-serif;letter-spacing:normal}.mtx-dialog-content{display:block;max-height:65vh;padding:0 24px;margin:0 -24px;overflow:auto;-webkit-overflow-scrolling:touch}.mtx-dialog-actions{display:flex;flex-wrap:wrap;align-items:center;justify-content:flex-end;min-height:52px;padding:8px 0;margin-bottom:-24px}"]}]}],c.ctorParameters=function(){return[{type:e.MatDialogRef},{type:void 0,decorators:[{type:t.Inject,args:[e.MAT_DIALOG_DATA]}]}]};var s=function(){},r=function(){},u={title:"",description:"",buttons:[{color:"warn",text:"OK",focusInitial:!0,onClick:s},{text:"CLOSE",onClick:r}],showCloseIcon:!1,disableClose:!0,width:"300px"},b=function(){function n(n){this.dialog=n}return n.prototype.originalOpen=function(n,t){return void 0===n&&(n=c),this.dialog.open(n,t)},n.prototype.open=function(n,t){void 0===t&&(t=c);var o=Object.assign({},u,n);return this.dialog.open(t,Object.assign(Object.assign({},o),{data:o}))},n.prototype.alert=function(n,t,o){void 0===t&&(t=""),void 0===o&&(o=function(){}),this.open({title:n,description:t,buttons:[{color:"warn",text:"OK",onClick:function(){return o()}}]})},n.prototype.confirm=function(n,t,o,e){void 0===t&&(t=""),void 0===o&&(o=function(){}),void 0===e&&(e=function(){}),this.open({title:n,description:t,buttons:[{color:"warn",text:"OK",onClick:function(){return o()}},{text:"CLOSE",onClick:function(){return e()}}]})},n}();b.decorators=[{type:t.Injectable}],b.ctorParameters=function(){return[{type:e.MatDialog}]};var g=function(){};g.decorators=[{type:t.NgModule,args:[{imports:[o.CommonModule,e.MatDialogModule,i.MatButtonModule,a.MatIconModule,l.MtxUtilsModule],exports:[c],declarations:[c],providers:[b],entryComponents:[c]}]}],n.MtxDialog=b,n.MtxDialogComponent=c,n.MtxDialogModule=g,n.ɵ0=s,n.ɵ1=r,Object.defineProperty(n,"__esModule",{value:!0})}));
//# sourceMappingURL=mtxDialog.umd.min.js.map