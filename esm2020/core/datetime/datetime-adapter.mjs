import { DateAdapter } from '@angular/material/core';
export class DatetimeAdapter extends DateAdapter {
    constructor(_delegate) {
        super();
        this._delegate = _delegate;
    }
    getValidDateOrNull(obj) {
        return this.isDateInstance(obj) && this.isValid(obj) ? obj : null;
    }
    compareDatetime(first, second, respectMinutePart = true) {
        return (this.compareDate(first, second) ||
            this.getHour(first) - this.getHour(second) ||
            (respectMinutePart && this.getMinute(first) - this.getMinute(second)));
    }
    sameDatetime(first, second) {
        if (first && second) {
            const firstValid = this.isValid(first);
            const secondValid = this.isValid(second);
            if (firstValid && secondValid) {
                return !this.compareDatetime(first, second);
            }
            return firstValid === secondValid;
        }
        return first === second;
    }
    sameYear(first, second) {
        return first && second && this.getYear(first) === this.getYear(second);
    }
    sameDay(first, second) {
        return (first &&
            second &&
            this.getDate(first) === this.getDate(second) &&
            this.sameMonthAndYear(first, second));
    }
    sameHour(first, second) {
        return (first && second && this.getHour(first) === this.getHour(second) && this.sameDay(first, second));
    }
    sameMinute(first, second) {
        return (first &&
            second &&
            this.getMinute(first) === this.getMinute(second) &&
            this.sameHour(first, second));
    }
    sameMonthAndYear(first, second) {
        if (first && second) {
            const firstValid = this.isValid(first);
            const secondValid = this.isValid(second);
            if (firstValid && secondValid) {
                return !(this.getYear(first) - this.getYear(second) || this.getMonth(first) - this.getMonth(second));
            }
            return firstValid === secondValid;
        }
        return first === second;
    }
    // delegate
    clone(date) {
        return this._delegate.clone(date);
    }
    addCalendarYears(date, years) {
        return this._delegate.addCalendarYears(date, years);
    }
    addCalendarMonths(date, months) {
        return this._delegate.addCalendarMonths(date, months);
    }
    addCalendarDays(date, days) {
        return this._delegate.addCalendarDays(date, days);
    }
    getYear(date) {
        return this._delegate.getYear(date);
    }
    getMonth(date) {
        return this._delegate.getMonth(date);
    }
    getDate(date) {
        return this._delegate.getDate(date);
    }
    getDayOfWeek(date) {
        return this._delegate.getDayOfWeek(date);
    }
    getMonthNames(style) {
        return this._delegate.getMonthNames(style);
    }
    getDateNames() {
        return this._delegate.getDateNames();
    }
    getDayOfWeekNames(style) {
        return this._delegate.getDayOfWeekNames(style);
    }
    getYearName(date) {
        return this._delegate.getYearName(date);
    }
    getFirstDayOfWeek() {
        return this._delegate.getFirstDayOfWeek();
    }
    getNumDaysInMonth(date) {
        return this._delegate.getNumDaysInMonth(date);
    }
    createDate(year, month, date) {
        return this._delegate.createDate(year, month, date);
    }
    today() {
        return this._delegate.today();
    }
    parse(value, parseFormat) {
        return this._delegate.parse(value, parseFormat);
    }
    format(date, displayFormat) {
        return this._delegate.format(date, displayFormat);
    }
    toIso8601(date) {
        return this._delegate.toIso8601(date);
    }
    isDateInstance(obj) {
        return this._delegate.isDateInstance(obj);
    }
    isValid(date) {
        return this._delegate.isValid(date);
    }
    invalid() {
        return this._delegate.invalid();
    }
    clampDate(date, min, max) {
        if (min && this.compareDatetime(date, min) < 0) {
            return min;
        }
        if (max && this.compareDatetime(date, max) > 0) {
            return max;
        }
        return date;
    }
}
//# sourceMappingURL=data:application/json;base64,