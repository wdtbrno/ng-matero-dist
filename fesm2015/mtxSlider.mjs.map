{"version":3,"file":"mtxSlider.mjs","sources":["../../../projects/extensions/slider/slider.ts","../../../projects/extensions/slider/slider.html","../../../projects/extensions/slider/slider-module.ts","../../../projects/extensions/slider/mtxSlider.ts"],"sourcesContent":["import { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput,\n} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subscription } from 'rxjs';\n\nconst activeEventOptions = normalizePassiveListenerOptions({ passive: false });\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 0;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mtx-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MTX_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MtxSlider),\n  multi: true,\n};\n\n/** A simple change event emitted by the MtxSlider component. */\nexport class MtxSliderChange {\n  /** The MtxSlider that changed. */\n  source!: MtxSlider;\n\n  /** The new value of the source slider. */\n  value!: number | number[] | null;\n}\n\n// Boilerplate for applying mixins to MtxSlider.\n/** @docs-private */\nconst _MtxSliderBase = mixinTabIndex(\n  mixinColor(\n    mixinDisabled(\n      class {\n        constructor(public _elementRef: ElementRef) {}\n      }\n    ),\n    'accent'\n  )\n);\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  selector: 'mtx-slider',\n  exportAs: 'mtxSlider',\n  providers: [MTX_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n\n    // On Safari starting to slide temporarily triggers text selection mode which\n    // show the wrong cursor. We prevent it by stopping the `selectstart` event.\n    '(selectstart)': '$event.preventDefault()',\n    'class': 'mtx-slider mat-focus-indicator',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n\n    // NVDA and Jaws appear to announce the `aria-valuenow` by calculating its percentage based\n    // on its value between `aria-valuemin` and `aria-valuemax`. Due to how decimals are handled,\n    // it can cause the slider to read out a very long value like 0.20000068 if the current value\n    // is 0.2 with a min of 0 and max of 1. We work around the issue by setting `aria-valuetext`\n    // to the same value that we set on the slider's thumb which will be truncated.\n    '[attr.aria-valuetext]': 'valueText == null ? displayValue : valueText',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mtx-slider-disabled]': 'disabled',\n    '[class.mtx-slider-has-ticks]': 'tickInterval',\n    '[class.mtx-slider-horizontal]': '!vertical',\n    '[class.mtx-slider-axis-inverted]': '_invertAxis',\n    '[class.mtx-slider-sliding]': '_isSliding',\n    '[class.mtx-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mtx-slider-vertical]': 'vertical',\n    '[class.mtx-slider-min-value]': '_isMinValue',\n    '[class.mtx-range-slider]': 'isRangeSlider()',\n    '[class.mtx-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mtx-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.scss'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MtxSlider\n  extends _MtxSliderBase\n  implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex\n{\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean {\n    return this._invert;\n  }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number {\n    return this._max;\n  }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number {\n    return this._min;\n  }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number {\n    return this._step;\n  }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean {\n    return this._thumbLabel;\n  }\n  set thumbLabel(value: boolean) {\n    this._thumbLabel = coerceBooleanProperty(value);\n  }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() {\n    return this._tickInterval;\n  }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | number[] | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | number[] | null) {\n    if (\n      v !== this._value ||\n      (v instanceof Array &&\n        this._value != null &&\n        (v[0] !== (this._value as number[])[0] || v[1] !== (this._value as number[])[1]))\n    ) {\n      let value: number | number[] | null = null;\n      if (v instanceof Array) {\n        value = [coerceNumberProperty(v[0]), coerceNumberProperty(v[1])];\n        value = [Math.min(value[0], value[1]), Math.max(value[1], value[0])];\n      } else {\n        value = coerceNumberProperty(v);\n      }\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        if (v instanceof Array) {\n          value = [\n            parseFloat((value as number[])[0].toFixed(this._roundToDecimal)),\n            parseFloat((value as number[])[1].toFixed(this._roundToDecimal)),\n          ];\n        } else {\n          value = parseFloat(Number(value).toFixed(this._roundToDecimal));\n        }\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | number[] | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith!: (value: number | null) => string | number;\n\n  /** Text corresponding to the slider's value. Used primarily for improved accessibility. */\n  @Input() valueText!: string;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean {\n    return this._vertical;\n  }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MtxSliderChange> = new EventEmitter<MtxSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MtxSliderChange> = new EventEmitter<MtxSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | number[] | null> = new EventEmitter<\n    number | number[] | null\n  >();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.value == null) {\n      return '';\n    }\n    if (this.displayWith) {\n      if (this.value instanceof Array) {\n        return this.displayWith(this.value[0]);\n      } else {\n        return this.displayWith(this.value);\n      }\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this.value instanceof Array) {\n      if (\n        this._roundToDecimal &&\n        this.value &&\n        (this.value[0] % 1 !== 0 || this.value[1] % 1 !== 0)\n      ) {\n        return this.value[0].toFixed(this._roundToDecimal);\n      }\n    } else {\n      if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n        return this.value.toFixed(this._roundToDecimal);\n      }\n    }\n\n    if (this.value instanceof Array) {\n      return this.value[0] || 0;\n    } else {\n      return this.value || 0;\n    }\n  }\n\n  /** The value to be used for display purposes. */\n  get displayValueRight(): string | number {\n    if (this.value == null) {\n      return '';\n    }\n    if (this.displayWith) {\n      return this.displayWith((this.value as number[])[1]);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (\n      this._roundToDecimal &&\n      this.value &&\n      this.value != null &&\n      (this.value as number[])[1] % 1 !== 0\n    ) {\n      return (this.value as number[])[1].toFixed(this._roundToDecimal);\n    }\n\n    return (this.value as number[])[1] || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number | number[] {\n    return this._clamp(this._percent);\n  }\n\n  private _percent: number | number[] = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's\n   *  value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom\n    // to top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    if (this.value instanceof Array) {\n      return (this.percent as number[])[0] === 0;\n    } else {\n      return this.percent === 0;\n    }\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStylesLeft(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    let scale: string = '';\n    if (this.percent instanceof Array) {\n      scale = this.vertical ? `1, ${this.percent[0]}, 1` : `${this.percent[0]}, 1, 1`;\n    } else {\n      scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    }\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`,\n    };\n  }\n\n  get _trackBackgroundStylesRight(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    let scale: string = '';\n    if (this.percent instanceof Array) {\n      scale = this.vertical ? `1, ${1 - this.percent[1]}, 1` : `${1 - this.percent[1]}, 1, 1`;\n    } else {\n      scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    }\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`,\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    let scale: string = '';\n    if (this.percent instanceof Array) {\n      scale = this.vertical\n        ? `1, ${this.percent[1] - this.percent[0]}, 1`\n        : `${this.percent[1] - this.percent[0]}, 1, 1`;\n    } else {\n      scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    }\n\n    const invertOffset =\n      this._getDirection() === 'rtl' && !this.vertical ? !this._invertAxis : this._invertAxis;\n    let offset: number = 0;\n    if (this.percent instanceof Array) {\n      offset = (invertOffset ? 1 - this.percent[1] : this.percent[0]) * 100;\n    } else {\n      offset = 0;\n    }\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    if (this.isRangeSlider()) {\n      return {\n        // scale3d avoids some rendering issues in Chrome. See #12071.\n        transform: `translate${axis}(${offset}%) scale3d(${scale})`,\n      };\n    } else {\n      return {\n        // scale3d avoids some rendering issues in Chrome. See #12071.\n        transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`,\n      };\n    }\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    const sign = !this.vertical && this._getDirection() === 'rtl' ? '' : '-';\n    const offset = (this._tickIntervalPercent / 2) * 100;\n    return {\n      transform: `translate${axis}(${sign}${offset}%)`,\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    const tickSize = this._tickIntervalPercent * 100;\n    const backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    const axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip\n    // the ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    const sign = !this.vertical && this._getDirection() === 'rtl' ? '-' : '';\n    const rotate = !this.vertical && this._getDirection() === 'rtl' ? ' rotate(180deg)' : '';\n    const styles: { [key: string]: string } = {\n      backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      transform: `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`,\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      const side = this.vertical\n        ? this._invertAxis\n          ? 'Bottom'\n          : 'Top'\n        : this._invertAxis\n        ? 'Right'\n        : 'Left';\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStylesLeft(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    const invertOffset =\n      this._getDirection() === 'rtl' && !this.vertical ? !this._invertAxis : this._invertAxis;\n    let offset: number = 0;\n    if (this.percent instanceof Array) {\n      offset = (invertOffset ? this.percent[0] : 1 - this.percent[0]) * 100;\n    } else {\n      offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    }\n    return {\n      transform: `translate${axis}(-${offset}%)`,\n    };\n  }\n\n  get _thumbContainerStylesRight(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    const invertOffset =\n      this._getDirection() === 'rtl' && !this.vertical ? !this._invertAxis : this._invertAxis;\n    let offset: number = 0;\n    if (this.percent instanceof Array) {\n      offset = (invertOffset ? this.percent[1] : 1 - this.percent[1]) * 100;\n    } else {\n      offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    }\n    return {\n      transform: `translate${axis}(-${offset}%)`,\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal!: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart!: number | number[] | null;\n\n  /** Position of the pointer when the dragging started. */\n  private _pointerPositionOnStart!: { x: number; y: number } | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper!: ElementRef;\n\n  /** The slider thumb which is currently used (left or right) */\n  private _currentSliderDir = 'l';\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return this._getDirection() === 'rtl' && !this.vertical ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  constructor(\n    elementRef: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() private _dir: Directionality,\n    @Attribute('tabindex') tabIndex: string,\n    // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n    private _ngZone?: NgZone\n  ) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex, 10) || 0;\n\n    this._runOutsizeZone(() => {\n      const element = elementRef.nativeElement;\n      element.addEventListener('mousedown', this._pointerDown, activeEventOptions);\n      element.addEventListener('touchstart', this._pointerDown, activeEventOptions);\n    });\n  }\n\n  ngOnInit() {\n    this._focusMonitor.monitor(this._elementRef, true).subscribe((origin: FocusOrigin) => {\n      this._isActive = !!origin && origin !== 'keyboard';\n      this._changeDetectorRef.detectChanges();\n    });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    const element = this._elementRef.nativeElement;\n    element.removeEventListener('mousedown', this._pointerDown, activeEventOptions);\n    element.removeEventListener('touchstart', this._pointerDown, activeEventOptions);\n    this._removeGlobalEvents();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue;\n    if (this.value instanceof Array) {\n      oldValue = [this.value[0], this.value[1]];\n    } else {\n      oldValue = this.value;\n    }\n\n    this._isSliding = false;\n    this._focusHostElement();\n\n    if (!this._sliderDimensions) {\n      return;\n    }\n    const offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    const size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    const posComponent = this.vertical ? event.clientY : event.clientX;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = Number(this._clamp((posComponent - offset) / size));\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    if (\n      percent <=\n      (this.percent as number[])[0] +\n        ((this.percent as number[])[1] - (this.percent as number[])[0]) / 2\n    ) {\n      this._currentSliderDir = 'l';\n    } else {\n      this._currentSliderDir = 'r';\n    }\n\n    if (this._currentSliderDir === 'l') {\n      this._updateValueFromPositionLeft({ x: event.clientX, y: event.clientY });\n    } else {\n      this._updateValueFromPositionRight({ x: event.clientX, y: event.clientY });\n    }\n\n    // Emit a change and input event if the value changed.\n    if (this.value instanceof Array) {\n      if (\n        (oldValue as number[])[0] !== this.value[0] ||\n        (oldValue as number[])[1] !== this.value[1]\n      ) {\n        this._emitInputEvent();\n        this._emitChangeEvent();\n      }\n    } else {\n      if (oldValue !== this.value) {\n        this._emitInputEvent();\n        this._emitChangeEvent();\n      }\n    }\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue;\n    if (this.value instanceof Array) {\n      oldValue = [this.value[0], this.value[1]];\n    } else {\n      oldValue = this.value;\n    }\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow\n        // key on an inverted slider the thumb moves in that direction. However for a blind\n        // user, nothing about the slider indicates that it is inverted. They will expect\n        // left to be decrement, regardless of how it appears on the screen. For speakers\n        // ofRTL languages, they probably expect left to mean increment. Therefore we flip\n        // the meaning of the side arrow keys for RTL. For inverted sliders we prefer a\n        // good a11y experience to having it \"look right\" for sighted users, therefore we do\n        // not swap the meaning.\n        this._increment(this._getDirection() === 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() === 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling\n        // preventDefault on it.\n        return;\n    }\n\n    if (this.value instanceof Array) {\n      if (\n        (oldValue as number[])[0] !== this.value[0] ||\n        (oldValue as number[])[1] !== this.value[1]\n      ) {\n        this._emitInputEvent();\n        this._emitChangeEvent();\n      }\n    } else {\n      if (oldValue !== this.value) {\n        this._emitInputEvent();\n        this._emitChangeEvent();\n      }\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Called when the user has put their pointer down on the slider. */\n  private _pointerDown = (event: TouchEvent | MouseEvent) => {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || this._isSliding || (!isTouchEvent(event) && event.button !== 0)) {\n      return;\n    }\n\n    this.calculateInitialSlideDirection(event);\n\n    this._runInsideZone(() => {\n      const oldValue = this.value;\n      const pointerPosition = getPointerPositionOnPage(event);\n      this._isSliding = true;\n      event.preventDefault();\n      this._focusHostElement();\n      this._onMouseenter(); // Simulate mouseenter in case this is a mobile device.\n      this._bindGlobalEvents(event);\n      this._focusHostElement();\n\n      // TODO:\n      // this._updateValueFromPosition(pointerPosition);\n      if (this.value instanceof Array) {\n        if (this._currentSliderDir === 'l') {\n          this._updateValueFromPositionLeft(pointerPosition);\n        } else if (this._currentSliderDir === 'r') {\n          this._updateValueFromPositionRight(pointerPosition);\n        }\n      } else {\n        this._updateValueFromPositionLeft(pointerPosition);\n      }\n\n      this._valueOnSlideStart = this.value;\n      this._pointerPositionOnStart = pointerPosition;\n\n      // Emit a change and input event if the value changed.\n      if (oldValue !== this.value) {\n        this._emitInputEvent();\n        this._emitChangeEvent();\n      }\n    });\n  };\n\n  /**\n   * Called when the user has moved their pointer after\n   * starting to drag. Bound on the document level.\n   */\n  private _pointerMove = (event: TouchEvent | MouseEvent) => {\n    if (this._isSliding) {\n      this.calculateInitialSlideDirection(event);\n\n      // Prevent the slide from selecting anything else.\n      event.preventDefault();\n      const oldValue = this.value;\n\n      // TODO:\n      // this._updateValueFromPosition(getPointerPositionOnPage(event));\n      const pointerPosition = getPointerPositionOnPage(event);\n      if (this._currentSliderDir === 'l') {\n        this._updateValueFromPositionLeft(pointerPosition);\n      } else if (this._currentSliderDir === 'r') {\n        this._updateValueFromPositionRight(pointerPosition);\n      } else {\n        if (!this.isRangeSlider()) {\n          this._updateValueFromPositionLeft(pointerPosition);\n        }\n      }\n\n      // Native range elements always emit `input` events when the value changed while sliding.\n      if (oldValue !== this.value) {\n        this._emitInputEvent();\n      }\n    }\n  };\n\n  /** Called when the user has lifted their pointer. Bound on the document level. */\n  private _pointerUp = (event: TouchEvent | MouseEvent) => {\n    if (this._isSliding) {\n      const pointerPositionOnStart = this._pointerPositionOnStart;\n      const currentPointerPosition = getPointerPositionOnPage(event);\n\n      event.preventDefault();\n      this._removeGlobalEvents();\n      this._valueOnSlideStart = this._pointerPositionOnStart = null;\n      this._isSliding = false;\n\n      if (\n        this._valueOnSlideStart !== this.value &&\n        !this.disabled &&\n        pointerPositionOnStart &&\n        (pointerPositionOnStart.x !== currentPointerPosition.x ||\n          pointerPositionOnStart.y !== currentPointerPosition.y)\n      ) {\n        this._emitChangeEvent();\n      }\n    }\n  };\n\n  /**\n   * Binds our global move and end events. They're bound at the document level and only while\n   * dragging so that the user doesn't have to keep their pointer exactly over the slider\n   * as they're swiping across the screen.\n   */\n  private _bindGlobalEvents(triggerEvent: TouchEvent | MouseEvent) {\n    if (typeof document !== 'undefined' && document) {\n      const isTouch = isTouchEvent(triggerEvent);\n      const moveEventName = isTouch ? 'touchmove' : 'mousemove';\n      const endEventName = isTouch ? 'touchend' : 'mouseup';\n      document.body.addEventListener(moveEventName, this._pointerMove, activeEventOptions);\n      document.body.addEventListener(endEventName, this._pointerUp, activeEventOptions);\n    }\n  }\n\n  /** Removes any global event listeners that we may have added. */\n  private _removeGlobalEvents() {\n    if (typeof document !== 'undefined' && document) {\n      document.body.removeEventListener('mousemove', this._pointerMove, activeEventOptions);\n      document.body.removeEventListener('mouseup', this._pointerUp, activeEventOptions);\n      document.body.removeEventListener('touchmove', this._pointerMove, activeEventOptions);\n      document.body.removeEventListener('touchend', this._pointerUp, activeEventOptions);\n    }\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    if (this.value instanceof Array) {\n      this.value = this._clamp(\n        [(this.value[0] || 0) + this.step * numSteps, (this.value[1] || 0) + this.step * numSteps],\n        this.min,\n        this.max\n      );\n    } else {\n      this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n    }\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: { x: number; y: number }) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    const offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    const size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    const posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - (percent as any);\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue =\n        Math.round(((exactValue as any) - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPositionLeft(pos: { x: number; y: number }) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    const offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    const size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    const posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = Number(this._clamp((posComponent - offset) / size));\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      if (this.value instanceof Array) {\n        this.value = [this.min, this.value[1]];\n      } else {\n        this.value = this.min;\n      }\n    } else if (percent === 1) {\n      if (this.value instanceof Array) {\n        this.value = [this.max, this.value[1]];\n      } else {\n        this.value = this.max;\n      }\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue =\n        Math.round((Number(exactValue) - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      if (this.value instanceof Array) {\n        this.value = [Number(this._clamp(closestValue, this.min, this.max)), this.value[1]];\n      } else {\n        this.value = this._clamp(closestValue, this.min, this.max);\n      }\n    }\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPositionRight(pos: { x: number; y: number }) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    const offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    const size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    const posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = Number(this._clamp((posComponent - offset) / size));\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      if (this.value instanceof Array) {\n        this.value = [this.value[0], this.min];\n      } else {\n        this.value = this.min;\n      }\n    } else if (percent === 1) {\n      if (this.value instanceof Array) {\n        this.value = [this.value[0], this.max];\n      } else {\n        this.value = this.max;\n      }\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue =\n        Math.round((Number(exactValue) - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      if (this.value instanceof Array) {\n        this.value = [this.value[0], Number(this._clamp(closestValue, this.min, this.max))];\n      } else {\n        this.value = this._clamp(closestValue, this.min, this.max);\n      }\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval === 'auto') {\n      const trackSize = this.vertical\n        ? this._sliderDimensions.height\n        : this._sliderDimensions.width;\n      const pixelsPerStep = (trackSize * this.step) / (this.max - this.min);\n      const stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      const pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = (this.tickInterval * this.step) / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MtxSliderChange {\n    const event = new MtxSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | number[] | null) {\n    if (value instanceof Array) {\n      return [\n        ((value[0] || 0) - this.min) / (this.max - this.min),\n        ((value[1] || 0) - this.min) / (this.max - this.min),\n      ];\n    } else {\n      return ((value || 0) - this.min) / (this.max - this.min);\n    }\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number | number[]) {\n    if (percentage instanceof Array) {\n      return [\n        this.min + percentage[0] * (this.max - this.min),\n        this.min + percentage[1] * (this.max - this.min),\n      ];\n    } else {\n      return this.min + percentage * (this.max - this.min);\n    }\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number | number[], min = 0, max = 1) {\n    if (value instanceof Array) {\n      return [Math.max(min, Math.min(value[0], max)), Math.max(min, Math.min(value[1], max))];\n    } else {\n      return Math.max(min, Math.min(value, max));\n    }\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /** Runs a callback outside of the NgZone, if possible. */\n  private _runOutsizeZone(fn: () => any) {\n    // @breaking-change 9.0.0 Remove this function once `_ngZone` is a required parameter.\n    this._ngZone ? this._ngZone.runOutsideAngular(fn) : fn();\n  }\n\n  /** Runs a callback inside of the NgZone, if possible. */\n  private _runInsideZone(fn: () => any) {\n    // @breaking-change 9.0.0 Remove this function once `_ngZone` is a required parameter.\n    this._ngZone ? this._ngZone.run(fn) : fn();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  isRangeSlider(): boolean {\n    return this.value instanceof Array;\n  }\n\n  private calculateInitialSlideDirection(event: MouseEvent | TouchEvent) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n    const offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    const size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    const pointerPosition = getPointerPositionOnPage(event);\n    const posComponent = this.vertical ? pointerPosition.y : pointerPosition.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = Number(this._clamp((posComponent - offset) / size));\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    if (\n      percent <=\n      (this.percent as number[])[0] +\n        ((this.percent as number[])[1] - (this.percent as number[])[0]) / 2\n    ) {\n      this._currentSliderDir = 'l';\n    } else {\n      this._currentSliderDir = 'r';\n    }\n  }\n\n  static ngAcceptInputType_invert: BooleanInput;\n  static ngAcceptInputType_max: NumberInput;\n  static ngAcceptInputType_min: NumberInput;\n  static ngAcceptInputType_step: NumberInput;\n  static ngAcceptInputType_thumbLabel: BooleanInput;\n  static ngAcceptInputType_tickInterval: NumberInput;\n  static ngAcceptInputType_value: NumberInput | NumberInput[];\n  static ngAcceptInputType_vertical: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_tabIndex: NumberInput;\n}\n\n/** Returns whether an event is a touch event. */\nfunction isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n  // This function is called for every pixel that the user has dragged so we need it to be\n  // as fast as possible. Since we only bind mouse events and touch events, we can assume\n  // that if the event's name starts with `t`, it's a touch event.\n  return event.type[0] === 't';\n}\n\n/** Gets the coordinates of a touch or mouse event relative to the viewport. */\nfunction getPointerPositionOnPage(event: MouseEvent | TouchEvent) {\n  // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n  const point = isTouchEvent(event) ? event.touches[0] || event.changedTouches[0] : event;\n  return { x: point.clientX, y: point.clientY };\n}\n","<div class=\"mtx-slider-wrapper\" #sliderWrapper>\n  <div class=\"mtx-slider-track-wrapper\">\n    <div *ngIf=\"isRangeSlider()\"\n         class=\"mtx-slider-track-background mtx-slider-track-background-left\"\n         [ngStyle]=\"_trackBackgroundStylesLeft\"></div>\n    <div class=\"mtx-slider-track-background mtx-slider-track-background-right\"\n         [ngStyle]=\"_trackBackgroundStylesRight\"></div>\n    <div class=\"mtx-slider-track-fill\" [ngClass]=\"{'mtx-range-slider-fill': isRangeSlider()}\"\n         [ngStyle]=\"_trackFillStyles\"></div>\n  </div>\n  <div class=\"mtx-slider-ticks-container\" [ngStyle]=\"_ticksContainerStyles\">\n    <div class=\"mtx-slider-ticks\" [ngStyle]=\"_ticksStyles\"></div>\n  </div>\n  <div class=\"mtx-slider-thumb-container\" #leftSlider\n       [ngStyle]=\"_thumbContainerStylesLeft\">\n    <div class=\"mtx-slider-focus-ring\"></div>\n    <div class=\"mtx-slider-thumb left\"></div>\n    <div class=\"mtx-slider-thumb-label\">\n      <span class=\"mtx-slider-thumb-label-text\">{{displayValue}}</span>\n    </div>\n  </div>\n  <div *ngIf=\"isRangeSlider()\"\n       class=\"mtx-slider-thumb-container\" #rightSlider\n       [ngStyle]=\"_thumbContainerStylesRight\">\n    <div class=\"mtx-slider-focus-ring\"></div>\n    <div class=\"mtx-slider-thumb right\"></div>\n    <div class=\"mtx-slider-thumb-label\">\n      <span class=\"mtx-slider-thumb-label-text\">{{displayValueRight}}</span>\n    </div>\n  </div>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MtxSlider } from './slider';\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MtxSlider, MatCommonModule],\n  declarations: [MtxSlider],\n})\nexport class MtxSliderModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}